@page
@model EntraBridge.Pages.ListApplicationsModel
@{
    ViewData["Title"] = "List Applications";
}
<div class="container">
    <h1 class="text-center my-4">Applications</h1>

    <!-- Tab Navigation -->
    <ul class="nav nav-tabs mb-3">
        <li class="nav-item">
            <a class="nav-link active" href="#all" data-bs-toggle="tab">All applications</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#owned" data-bs-toggle="tab">Owned applications</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#deleted" data-bs-toggle="tab">Deleted applications</a>
        </li>
    </ul>
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
    }

    <!-- Search and Filter -->
    <div class="row mb-3">
        <div class="col-md-8">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" class="form-control" id="searchInput" placeholder="Type to filter or search for applications">
                <button class="btn btn-primary" id="findAllEntraButton" type="button">
                    Find on All Entra
                </button>
            </div>
            <small class="text-muted mt-1">Type to filter loaded applications or click the button to search all applications on Entra</small>
        </div>
    </div>

    <div class="mt-2 mb-3">
        <span id="applicationCount">@Model.Applications.Count</span> applications found
    </div>

    <!-- Applications Table -->
    <div class="table-responsive">
        <table class="table table-hover" id="applicationsTable">
            <thead>
                <tr>
                    <th scope="col">Display name <i class="bi bi-arrow-up-short"></i></th>
                    <th scope="col">Application (client) ID</th>
                    <th scope="col">Created on <i class="bi bi-arrow-down-short"></i></th>
                </tr>
            </thead>
            <tbody id="applicationsTableBody">
                @foreach (var app in Model.Applications)
                {
                    <tr>
                        <td>
                            @{
                                string typeClass = "bg-primary";
                                if (app.ApplicationType == "W")
                                    typeClass = "bg-success";
                                else if (app.ApplicationType == "IA")
                                    typeClass = "bg-info";
                            }
                            <span class="@typeClass text-white px-2 rounded-1">@app.ApplicationType</span> @app.DisplayName
                        </td>
                        <td>@app.ApplicationId</td>
                        <td>@app.CreatedOn.ToString("M/d/yyyy")</td>
                    </tr>
                }
                @if (!Model.Applications.Any())
                {
                    <tr>
                        <td colspan="4" class="text-center">No applications found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
    <!-- Load More -->
    @if ((bool)(ViewData["HasMoreRecords"] ?? false))
    {
        <div class="text-center mt-3 mb-4" id="loadMoreContainer">
            <button id="loadMoreButton" class="btn btn-outline-primary" 
                   data-next-page="@ViewData["NextPage"]" 
                   data-next-token="@ViewData["NextPageToken"]">
                Load More Applications
            </button>
            <div id="loadingSpinner" class="spinner-border text-primary d-none" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }

    <div class="d-flex justify-content-between mt-4">
        <a href="/AppRoles" class="btn btn-secondary">Back</a>
        <a href="/AddApplication" class="btn btn-primary">Add New Application</a>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Count displayed applications and update the counter
        const updateAppCount = () => {
            const visibleRows = document.querySelectorAll('#applicationsTable tbody tr:not(.d-none)').length;
            document.getElementById('applicationCount').textContent = visibleRows;
        };
        
        // Client-side filtering as user types
        const searchInput = document.getElementById('searchInput');
        searchInput.addEventListener('keyup', function() {
            const searchTerm = this.value.trim().toLowerCase();
            const allRows = document.querySelectorAll('#applicationsTableBody tr');
            
            // If search term is empty, show all rows
            if (searchTerm === '') {
                allRows.forEach(row => row.classList.remove('d-none'));
                updateAppCount();
                return;
            }
            
            let foundMatch = false;
            
            // Filter rows based on search term
            allRows.forEach(row => {
                const displayName = row.cells[0]?.textContent.toLowerCase() || '';
                const applicationId = row.cells[1]?.textContent.toLowerCase() || '';
                
                // Check if row matches search term
                if (displayName.includes(searchTerm) || applicationId.includes(searchTerm)) {
                    row.classList.remove('d-none');
                    foundMatch = true;
                } else {
                    row.classList.add('d-none');
                }
            });
            
            // Show "No matching applications" if no matches found
            const noMatchRow = document.getElementById('noMatchRow');
            if (!foundMatch && allRows.length > 0) {
                if (!noMatchRow) {
                    const tbody = document.getElementById('applicationsTableBody');
                    const newRow = document.createElement('tr');
                    newRow.id = 'noMatchRow';
                    const td = document.createElement('td');
                    td.colSpan = 4;
                    td.className = 'text-center text-muted';
                    td.textContent = 'No matching applications found in the loaded data. Try using "Find on All Entra" to search the entire directory.';
                    newRow.appendChild(td);
                    tbody.appendChild(newRow);
                } else {
                    noMatchRow.classList.remove('d-none');
                }
            } else if (noMatchRow) {
                noMatchRow.classList.add('d-none');
            }
            
            updateAppCount();
        });

        // Find on All Entra functionality
        document.getElementById('findAllEntraButton').addEventListener('click', async function() {
            const searchTerm = document.getElementById('searchInput').value.trim();
            
            // Show loading spinner
            const loadingSpinner = document.getElementById('loadingSpinner');
            loadingSpinner.classList.remove('d-none');
            
            try {
                // Make AJAX call to search all Entra applications
                const response = await fetch(`?handler=SearchApplications&searchTerm=${encodeURIComponent(searchTerm)}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error('Failed to search applications');
                }
                
                const data = await response.json();
                
                // Check for error in the response
                if (data.error) {
                    throw new Error(data.error);
                }
                
                // Clear existing table data
                const tbody = document.getElementById('applicationsTableBody');
                tbody.innerHTML = '';
                
                if (data.applications.length === 0) {
                    const row = document.createElement('tr');
                    const td = document.createElement('td');
                    td.colSpan = 4;
                    td.className = 'text-center';
                    td.textContent = 'No applications found matching your search.';
                    row.appendChild(td);
                    tbody.appendChild(row);
                } else {
                    // Populate table with search results
                    data.applications.forEach(app => {
                        const row = document.createElement('tr');
                        
                        // Display name with app type
                        const tdName = document.createElement('td');
                        const spanType = document.createElement('span');
                        let typeClass = 'bg-primary';
                        if (app.applicationType === 'W') typeClass = 'bg-success';
                        else if (app.applicationType === 'IA') typeClass = 'bg-info';
                        spanType.className = `${typeClass} text-white px-2 rounded-1`;
                        spanType.textContent = app.applicationType;
                        tdName.appendChild(spanType);
                        tdName.appendChild(document.createTextNode(' ' + app.displayName));
                        row.appendChild(tdName);
                        
                        // Application ID
                        const tdId = document.createElement('td');
                        tdId.textContent = app.applicationId;
                        row.appendChild(tdId);
                        
                        // Created date
                        const tdCreated = document.createElement('td');
                        const createdDate = new Date(app.createdOn);
                        tdCreated.textContent = (createdDate.getMonth() + 1) + '/' + 
                                                createdDate.getDate() + '/' + 
                                                createdDate.getFullYear();
                        row.appendChild(tdCreated);
                        tbody.appendChild(row);
                    });
                }
                
                // Update load more button visibility
                const loadMoreContainer = document.getElementById('loadMoreContainer');
                if (data.hasMoreRecords) {
                    loadMoreContainer.classList.remove('d-none');
                    const loadMoreButton = document.getElementById('loadMoreButton');
                    loadMoreButton.setAttribute('data-next-page', data.nextPage);
                    loadMoreButton.setAttribute('data-next-token', data.nextPageToken);
                    loadMoreButton.setAttribute('data-search-term', searchTerm);
                    loadMoreButton.classList.remove('d-none');
                } else {
                    loadMoreContainer.classList.add('d-none');
                }
                
            } catch (error) {
                console.error('Error searching applications:', error);
                // Show error message
                const errorDiv = document.createElement('div');
                errorDiv.className = 'alert alert-danger mt-3';
                errorDiv.textContent = 'Failed to search applications. Please try again.';
                document.querySelector('.table-responsive').insertAdjacentElement('beforebegin', errorDiv);
                
                // Auto-remove error after 5 seconds
                setTimeout(() => errorDiv.remove(), 5000);
            } finally {
                // Hide loading spinner
                loadingSpinner.classList.add('d-none');
                
                // Update application count
                updateAppCount();
            }
        });

        // Load more functionality
        const loadMoreButton = document.getElementById('loadMoreButton');
        if (loadMoreButton) {
            loadMoreButton.addEventListener('click', async function() {
                // Show loading spinner
                loadMoreButton.classList.add('d-none');
                document.getElementById('loadingSpinner').classList.remove('d-none');
                
                try {
                    const nextPage = this.getAttribute('data-next-page');
                    const nextToken = this.getAttribute('data-next-token');
                    const searchTerm = this.getAttribute('data-search-term') || '';
                    
                    // URL for request depends on whether we're searching or just loading more
                    let url = `?handler=LoadMore&currentPage=${nextPage}&nextToken=${encodeURIComponent(nextToken || '')}`;
                    if (searchTerm) {
                        url = `?handler=SearchApplications&currentPage=${nextPage}&nextToken=${encodeURIComponent(nextToken || '')}&searchTerm=${encodeURIComponent(searchTerm)}`;
                    }
                    
                    // Make AJAX call to load more data
                    const response = await fetch(url, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        credentials: 'include'
                    });
                    
                    if (!response.ok) {
                        console.error('Server responded with:', response.status, response.statusText);
                        throw new Error('Failed to load more applications');
                    }
                    
                    const data = await response.json();
                    
                    // Check for error in the response
                    if (data.error) {
                        console.error('Error from server:', data.error);
                        throw new Error(data.error);
                    }
                    
                    // Append new applications to the table
                    const tbody = document.getElementById('applicationsTableBody');
                    
                    data.applications.forEach(app => {
                        // Only add if this is a new application (avoid duplicates)
                        const existingRows = Array.from(tbody.querySelectorAll('tr')).map(row => 
                            row.cells[1]?.textContent.trim());
                        
                        if (!existingRows.includes(app.applicationId)) {
                            const row = document.createElement('tr');
                            
                            // Display name with app type
                            const tdName = document.createElement('td');
                            const spanType = document.createElement('span');
                            let typeClass = 'bg-primary';
                            if (app.applicationType === 'W') typeClass = 'bg-success';
                            else if (app.applicationType === 'IA') typeClass = 'bg-info';
                            spanType.className = `${typeClass} text-white px-2 rounded-1`;
                            spanType.textContent = app.applicationType;
                            tdName.appendChild(spanType);
                            tdName.appendChild(document.createTextNode(' ' + app.displayName));
                            row.appendChild(tdName);
                            
                            // Application ID
                            const tdId = document.createElement('td');
                            tdId.textContent = app.applicationId;
                            row.appendChild(tdId);
                            
                            // Created date
                            const tdCreated = document.createElement('td');
                            const createdDate = new Date(app.createdOn);
                            tdCreated.textContent = (createdDate.getMonth() + 1) + '/' + 
                                                     createdDate.getDate() + '/' + 
                                                     createdDate.getFullYear();
                            row.appendChild(tdCreated);
                            tbody.appendChild(row);                            
                        }
                    });
                    
                    // Re-apply current search filter if there's a search term
                    const currentSearchTerm = document.getElementById('searchInput').value.trim();
                    if (currentSearchTerm) {
                        const allRows = document.querySelectorAll('#applicationsTableBody tr');
                        allRows.forEach(row => {
                            const displayName = row.cells[0]?.textContent.toLowerCase() || '';
                            const applicationId = row.cells[1]?.textContent.toLowerCase() || '';
                            
                            if (displayName.includes(currentSearchTerm.toLowerCase()) || 
                                applicationId.includes(currentSearchTerm.toLowerCase())) {
                                row.classList.remove('d-none');
                            } else {
                                row.classList.add('d-none');
                            }
                        });
                    }
                    
                    // Update load more button with new page token
                    if (data.hasMoreRecords) {
                        loadMoreButton.setAttribute('data-next-page', data.nextPage);
                        loadMoreButton.setAttribute('data-next-token', data.nextPageToken);
                        loadMoreButton.classList.remove('d-none');
                    } else {
                        // No more records, hide the load more container
                        document.getElementById('loadMoreContainer').classList.add('d-none');
                    }
                    
                    // Update application count
                    updateAppCount();
                    
                } catch (error) {
                    console.error('Error loading more applications:', error);
                    // Show error message
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'alert alert-danger mt-3';
                    errorDiv.textContent = 'Failed to load more applications. Please try again.';
                    document.getElementById('loadMoreContainer').insertAdjacentElement('afterend', errorDiv);
                    
                    // Re-enable load more button
                    loadMoreButton.classList.remove('d-none');
                } finally {
                    // Hide loading spinner
                    document.getElementById('loadingSpinner').classList.add('d-none');
                }
            });
        }

        // Initial count update
        updateAppCount();
    });
</script>
